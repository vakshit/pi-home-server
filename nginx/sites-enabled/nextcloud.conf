upstream php-handler {
  server nextcloud:9000;
}
server {
  listen 5001;
  listen [::]:5001;
  http2 on;
  server_name drive-akshit.aditjain.me;


  root /var/www/html;
  index index.php index.html /index.php$request_uri;

  # SSL
  # ssl_certificate /etc/nginx/ssl/certs/gateway.home.local.crt;
  # ssl_certificate_key /etc/nginx/ssl/certs/gateway.home.local.key;
  # ssl_dhparam /etc/nginx/ssl/certs/gateway.home.local.dhparam.pem;
  ssl_certificate /etc/nginx/ssl/certs/config/live/akshit.aditjain.me/fullchain.pem;
  ssl_certificate_key /etc/nginx/ssl/certs/config/live/akshit.aditjain.me/privkey.pem;

  # security
  include /etc/nginx/ssl/configs/security.conf;

  # additional config
  include /etc/nginx/ssl/configs/general.conf;


  # reverse proxy
  location = / {
    if ( $http_user_agent ~ ^DavClnt ) {
      return 302 /remote.php/webdav/$is_args$args;
    }
  }


  location ^~ /.well-known {
    # The rules in this block are an adaptation of the rules
    # in `.htaccess` that concern `/.well-known`.

    location = /.well-known/carddav {
      return 301 /remote.php/dav/;
    }
    location = /.well-known/caldav {
      return 301 /remote.php/dav/;
    }

    location /.well-known/acme-challenge {
      try_files $uri $uri/ =404;
    }
    location /.well-known/pki-validation {
      try_files $uri $uri/ =404;
    }

    # Let Nextcloud's API for `/.well-known` URIs handle all other
    # requests by passing them to the front-end controller.
    return 301 /index.php$request_uri;
  }

  # Rules borrowed from `.htaccess` to hide certain paths from clients
  location ~ ^/(?:build|tests|config|lib|3rdparty|templates|data)(?:$|/) {
    return 404;
  }
  location ~ ^/(?:\.|autotest|occ|issue|indie|db_|console) {
    return 404;
  }

  # Ensure this block, which passes PHP files to the PHP process, is above the blocks
  # which handle static assets (as seen below). If this block is not declared first,
  # then Nginx will encounter an infinite rewriting loop when it prepends `/index.php`
  # to the URI, resulting in a HTTP 500 error response.
  location ~ \.php(?:$|/) {
    # Required for legacy support
    rewrite ^/(?!index|remote|public|cron|core\/ajax\/update|status|ocs\/v[12]|updater\/.+|ocs-provider\/.+|.+\/richdocumentscode\/proxy) /index.php$request_uri;

    fastcgi_split_path_info ^(.+?\.php)(/.*)$;
    set $path_info $fastcgi_path_info;

    try_files $fastcgi_script_name =404;

    include fastcgi_params;
    fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
    fastcgi_param PATH_INFO $path_info;
    fastcgi_param HTTPS on;

    fastcgi_param modHeadersAvailable true; # Avoid sending the security headers twice
    fastcgi_param front_controller_active true; # Enable pretty urls
    fastcgi_pass php-handler;

    fastcgi_intercept_errors on;
    fastcgi_request_buffering off;

    fastcgi_max_temp_file_size 0;
  }

  # Javascript mimetype fixes for nginx
  # Note: The block below should be removed, and the js|mjs section should be
  # added to the block below this one. This is a temporary fix until Nginx
  # upstream fixes the js mime-type
  location ~* \.(?:js|mjs)$ {
    types {
      text/javascript js mjs;
    }
    try_files $uri /index.php$request_uri;
    add_header Cache-Control "public, max-age=15778463, $asset_immutable";
    access_log off;
  }

  # Serve static files
  location ~ \.(?:css|svg|gif|png|jpg|ico|wasm|tflite|map|ogg|flac)$ {
    try_files $uri /index.php$request_uri;
    add_header Cache-Control "public, max-age=15778463, $asset_immutable";
    access_log off; # Optional: Don't log access to assets

    location ~ \.wasm$ {
      default_type application/wasm;
    }
  }

  location ~ \.woff2?$ {
    try_files $uri /index.php$request_uri;
    expires 7d; # Cache-Control policy borrowed from `.htaccess`
    access_log off; # Optional: Don't log access to assets
  }

  # Rule borrowed from `.htaccess`
  location /remote {
    return 301 /remote.php$request_uri;
  }

  location / {
    try_files $uri $uri/ /index.php$request_uri;
  }
}


# server {
#   listen 443 ssl;
#   listen [::]:443 ssl;
#   http2 on;
#   server_name drive.akshit.aditjain.me;


#   root /var/www/html;
#   index index.php index.html /index.php$request_uri;

#   # SSL
#   # ssl_certificate /etc/nginx/ssl/certs/gateway.home.local.crt;
#   # ssl_certificate_key /etc/nginx/ssl/certs/gateway.home.local.key;
#   # ssl_dhparam /etc/nginx/ssl/certs/gateway.home.local.dhparam.pem;
#   ssl_certificate /etc/nginx/ssl/certs/config/live/akshit.aditjain.me/fullchain.pem;
#   ssl_certificate_key /etc/nginx/ssl/certs/config/live/akshit.aditjain.me/privkey.pem;

#   # security
#   include /etc/nginx/ssl/configs/security.conf;

#   # additional config
#   include /etc/nginx/ssl/configs/general.conf;


#   # reverse proxy
#   location = / {
#     if ( $http_user_agent ~ ^DavClnt ) {
#       return 302 /remote.php/webdav/$is_args$args;
#     }
#   }


#   location ^~ /.well-known {
#     # The rules in this block are an adaptation of the rules
#     # in `.htaccess` that concern `/.well-known`.

#     location = /.well-known/carddav {
#       return 301 /remote.php/dav/;
#     }
#     location = /.well-known/caldav {
#       return 301 /remote.php/dav/;
#     }

#     location /.well-known/acme-challenge {
#       try_files $uri $uri/ =404;
#     }
#     location /.well-known/pki-validation {
#       try_files $uri $uri/ =404;
#     }

#     # Let Nextcloud's API for `/.well-known` URIs handle all other
#     # requests by passing them to the front-end controller.
#     return 301 /index.php$request_uri;
#   }

#   # Rules borrowed from `.htaccess` to hide certain paths from clients
#   location ~ ^/(?:build|tests|config|lib|3rdparty|templates|data)(?:$|/) {
#     return 404;
#   }
#   location ~ ^/(?:\.|autotest|occ|issue|indie|db_|console) {
#     return 404;
#   }

#   # Ensure this block, which passes PHP files to the PHP process, is above the blocks
#   # which handle static assets (as seen below). If this block is not declared first,
#   # then Nginx will encounter an infinite rewriting loop when it prepends `/index.php`
#   # to the URI, resulting in a HTTP 500 error response.
#   location ~ \.php(?:$|/) {
#     # Required for legacy support
#     rewrite ^/(?!index|remote|public|cron|core\/ajax\/update|status|ocs\/v[12]|updater\/.+|ocs-provider\/.+|.+\/richdocumentscode\/proxy) /index.php$request_uri;

#     fastcgi_split_path_info ^(.+?\.php)(/.*)$;
#     set $path_info $fastcgi_path_info;

#     try_files $fastcgi_script_name =404;

#     include fastcgi_params;
#     fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
#     fastcgi_param PATH_INFO $path_info;
#     fastcgi_param HTTPS on;

#     fastcgi_param modHeadersAvailable true; # Avoid sending the security headers twice
#     fastcgi_param front_controller_active true; # Enable pretty urls
#     fastcgi_pass php-handler;

#     fastcgi_intercept_errors on;
#     fastcgi_request_buffering off;

#     fastcgi_max_temp_file_size 0;
#   }

#   # Javascript mimetype fixes for nginx
#   # Note: The block below should be removed, and the js|mjs section should be
#   # added to the block below this one. This is a temporary fix until Nginx
#   # upstream fixes the js mime-type
#   location ~* \.(?:js|mjs)$ {
#     types {
#       text/javascript js mjs;
#     }
#     try_files $uri /index.php$request_uri;
#     add_header Cache-Control "public, max-age=15778463, $asset_immutable";
#     access_log off;
#   }

#   # Serve static files
#   location ~ \.(?:css|svg|gif|png|jpg|ico|wasm|tflite|map|ogg|flac)$ {
#     try_files $uri /index.php$request_uri;
#     add_header Cache-Control "public, max-age=15778463, $asset_immutable";
#     access_log off; # Optional: Don't log access to assets

#     location ~ \.wasm$ {
#       default_type application/wasm;
#     }
#   }

#   location ~ \.woff2?$ {
#     try_files $uri /index.php$request_uri;
#     expires 7d; # Cache-Control policy borrowed from `.htaccess`
#     access_log off; # Optional: Don't log access to assets
#   }

#   # Rule borrowed from `.htaccess`
#   location /remote {
#     return 301 /remote.php$request_uri;
#   }

#   location / {
#     try_files $uri $uri/ /index.php$request_uri;
#   }
# }
